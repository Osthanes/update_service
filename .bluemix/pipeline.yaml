---
stages:
- name: Active Deploy Example - Manual
  inputs:
  - type: git
    branch: master
  triggers:
  - type: commit
  properties:
  - name: CF_ACTIVE_DEPLOY_ENDPOINT
    value: http://activedeployapi.ng.bluemix.net
    type: text
  - name: ROUTE_HOSTNAME
    value: adstep
    type: text
  - name: ROUTE_DOMAIN
    value: mybluemix.net
    type: text
  - name: AUTO_RECOVERY
    value: 'false'
    type: text
  - name: CONCURRENT_VERSIONS
    value: '2'
    type: text
  - name: RAMPUP
    value: '60'
    type: text
  - name: TEST
    value: '100'
    type: text
  - name: RAMPDOWN
    value: '60'
    type: text
  - name: UPDATE_ID
    value: Value
    type: text
  - name: PORT
    value: '80'
    type: text
  - name: BACKEND
    value: APPS
    type: text
  - name: CREATE
    value: Value
    type: text
  - name: USER_TEST
    value: Value
    type: text
  jobs:
  - name: Deploy Successor
    type: deployer
    target:
      region_id: ibm:yp:us-south
      organization: eergun_org
      space: dev
      application: ad_step
    script: |-
      #!/bin/bash

      env

      UPDATE_ID=${BUILD_NUMBER}
      echo "update id: ${UPDATE_ID}"
      export UPDATE_ID

      cf push "${CF_APP}_${BUILD_NUMBER}" --no-route -i 1 -s cflinuxfs2
  - name: Begin AD, Rampup
    type: deployer
    target:
      region_id: ibm:yp:us-south
      organization: eergun_org
      space: dev
      application: ad_step
    script: |-
      #!/bin/bash

      env

      with_retry() {
          if [[ $DEBUG -eq 1 ]]; then
              local START_TIME=$(date +"%s")
          fi
          local RETRY_CALL="$*"
          echo $RETRY_CALL
          $RETRY_CALL
          local RETRY_RC=$?
          local CURRENT_RETRY_COUNT=0
          if [ -z "$CMD_RETRY" ]; then
              local CMD_RETRY=5
          fi
          while [[  $CURRENT_RETRY_COUNT -lt $CMD_RETRY && $RETRY_RC -ne 0 ]]; do
              ((CURRENT_RETRY_COUNT++))
              echo -e "${label_color}${1} command failed; retrying in 3 seconds${no_color} ($CURRENT_RETRY_COUNT of $CMD_RETRY)"
              sleep 3
              echo $RETRY_CALL
              $RETRY_CALL
              RETRY_RC=$?
          done

          if [ $RETRY_RC -ne 0 ]; then
              echo -e "${red}${1} command failed: $RETRY_CALL${no_color}" | tee -a "$ERROR_LOG_FILE"
          fi

          if [[ $DEBUG -eq 1 ]]; then
              local END_TIME=$(date +"%s")
              export LAST_CMD_TIME=$(($END_TIME-$START_TIME))
              echo -e "Cmd '$RETRY_CALL' runtime of `date -u -d @\"$LAST_CMD_TIME\" +'%-Mm %-Ss'`"
          fi

          return $RETRY_RC
      }

      # use this function to help avoid pipeline problems when accessing git repositories
      git_retry() {
          if [ -n "$GIT_RETRY" ]; then
              local SAVE_CMD_RETRY=$CMD_RETRY
              export CMD_RETRY=$GIT_RETRY
          fi
          with_retry "git" $*
          if [ -n "$SAVE_CMD_RETRY" ]; then
              export CMD_RETRY=$SAVE_CMD_RETRY
          fi
      }

      git_retry clone https://github.com/Osthanes/update_service.git update_service
      /bin/bash update_service/activedeploy_step_1.sh
      #source ${EXT_DIR}/deployscripts_step/temp1.sh
  - name: Test
    type: tester
    fail_stage: false
    script: "#!/bin/bash\n# invoke tests here\n\nUSER_TEST=true\n\nexport USER_TEST\n\
      \  "
  - name: Finish AD
    type: deployer
    target:
      region_id: ibm:yp:us-south
      organization: eergun_org
      space: dev
      application: ad_step
    script: |-
      #!/bin/bash

      env

      with_retry() {
          if [[ $DEBUG -eq 1 ]]; then
              local START_TIME=$(date +"%s")
          fi
          local RETRY_CALL="$*"
          echo $RETRY_CALL
          $RETRY_CALL
          local RETRY_RC=$?
          local CURRENT_RETRY_COUNT=0
          if [ -z "$CMD_RETRY" ]; then
              local CMD_RETRY=5
          fi
          while [[  $CURRENT_RETRY_COUNT -lt $CMD_RETRY && $RETRY_RC -ne 0 ]]; do
              ((CURRENT_RETRY_COUNT++))
              echo -e "${label_color}${1} command failed; retrying in 3 seconds${no_color} ($CURRENT_RETRY_COUNT of $CMD_RETRY)"
              sleep 3
              echo $RETRY_CALL
              $RETRY_CALL
              RETRY_RC=$?
          done

          if [ $RETRY_RC -ne 0 ]; then
              echo -e "${red}${1} command failed: $RETRY_CALL${no_color}" | tee -a "$ERROR_LOG_FILE"
          fi

          if [[ $DEBUG -eq 1 ]]; then
              local END_TIME=$(date +"%s")
              export LAST_CMD_TIME=$(($END_TIME-$START_TIME))
              echo -e "Cmd '$RETRY_CALL' runtime of `date -u -d @\"$LAST_CMD_TIME\" +'%-Mm %-Ss'`"
          fi

          return $RETRY_RC
      }

      # use this function to help avoid pipeline problems when accessing git repositories
      git_retry() {
          if [ -n "$GIT_RETRY" ]; then
              local SAVE_CMD_RETRY=$CMD_RETRY
              export CMD_RETRY=$GIT_RETRY
          fi
          with_retry "git" $*
          if [ -n "$SAVE_CMD_RETRY" ]; then
              export CMD_RETRY=$SAVE_CMD_RETRY
          fi
      }

      git_retry clone https://github.com/Osthanes/update_service.git update_service
      /bin/bash update_service/activedeploy_step_2.sh
